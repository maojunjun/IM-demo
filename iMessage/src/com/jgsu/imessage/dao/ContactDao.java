package com.jgsu.imessage.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.jgsu.imessage.dao.Contact;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table CONTACT.
*/
public class ContactDao extends AbstractDao<Contact, Long> {

    public static final String TABLENAME = "CONTACT";

    /**
     * Properties of entity Contact.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Account = new Property(0, String.class, "account", false, "ACCOUNT");
        public final static Property Nick = new Property(1, String.class, "nick", false, "NICK");
        public final static Property Avator = new Property(2, Integer.class, "avator", false, "AVATOR");
        public final static Property Spell = new Property(3, String.class, "spell", false, "SPELL");
        public final static Property Id = new Property(4, Long.class, "id", true, "_id");
    };


    public ContactDao(DaoConfig config) {
        super(config);
    }
    
    public ContactDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'CONTACT' (" + //
                "'ACCOUNT' TEXT," + // 0: account
                "'NICK' TEXT," + // 1: nick
                "'AVATOR' INTEGER," + // 2: avator
                "'SPELL' TEXT," + // 3: spell
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT );"); // 4: id
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'CONTACT'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Contact entity) {
        stmt.clearBindings();
 
        String account = entity.getAccount();
        if (account != null) {
            stmt.bindString(1, account);
        }
 
        String nick = entity.getNick();
        if (nick != null) {
            stmt.bindString(2, nick);
        }
 
        Integer avator = entity.getAvator();
        if (avator != null) {
            stmt.bindLong(3, avator);
        }
 
        String spell = entity.getSpell();
        if (spell != null) {
            stmt.bindString(4, spell);
        }
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(5, id);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4);
    }    

    /** @inheritdoc */
    @Override
    public Contact readEntity(Cursor cursor, int offset) {
        Contact entity = new Contact( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // account
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // nick
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // avator
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // spell
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4) // id
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Contact entity, int offset) {
        entity.setAccount(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setNick(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setAvator(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setSpell(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setId(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Contact entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Contact entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
